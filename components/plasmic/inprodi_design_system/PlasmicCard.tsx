// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5nPYJMkHKsudqrrya3SLGq
// Component: 49oQpRNcEL8M

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 5nPYJMkHKsudqrrya3SLGq/projectcss
import sty from "./PlasmicCard.module.css"; // plasmic-import: 49oQpRNcEL8M/css

createPlasmicElementProxy;

export type PlasmicCard__VariantMembers = {
  shadow: "smallShadow" | "largeShadow";
  hideHeader: "hideHeader";
  padding: "xs10Px" | "sm16Px" | "md22Px" | "lg28Px" | "xl34Px";
};
export type PlasmicCard__VariantsArgs = {
  shadow?: SingleChoiceArg<"smallShadow" | "largeShadow">;
  hideHeader?: SingleBooleanChoiceArg<"hideHeader">;
  padding?: SingleChoiceArg<
    "xs10Px" | "sm16Px" | "md22Px" | "lg28Px" | "xl34Px"
  >;
};
type VariantPropType = keyof PlasmicCard__VariantsArgs;
export const PlasmicCard__VariantProps = new Array<VariantPropType>(
  "shadow",
  "hideHeader",
  "padding"
);

export type PlasmicCard__ArgsType = {
  bodyContent?: React.ReactNode;
  children?: React.ReactNode;
  slot?: React.ReactNode;
};
type ArgPropType = keyof PlasmicCard__ArgsType;
export const PlasmicCard__ArgProps = new Array<ArgPropType>(
  "bodyContent",
  "children",
  "slot"
);

export type PlasmicCard__OverridesType = {
  mainContainer?: Flex__<"div">;
  header?: Flex__<"div">;
  body?: Flex__<"div">;
};

export interface DefaultCardProps {
  bodyContent?: React.ReactNode;
  children?: React.ReactNode;
  slot?: React.ReactNode;
  shadow?: SingleChoiceArg<"smallShadow" | "largeShadow">;
  hideHeader?: SingleBooleanChoiceArg<"hideHeader">;
  padding?: SingleChoiceArg<
    "xs10Px" | "sm16Px" | "md22Px" | "lg28Px" | "xl34Px"
  >;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCard__RenderFunc(props: {
  variants: PlasmicCard__VariantsArgs;
  args: PlasmicCard__ArgsType;
  overrides: PlasmicCard__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "shadow",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.shadow
      },
      {
        path: "hideHeader",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.hideHeader
      },
      {
        path: "padding",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.padding
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"mainContainer"}
      data-plasmic-override={overrides.mainContainer}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.mainContainer,
        {
          [sty.mainContainerhideHeader_padding_xl34Px]:
            hasVariant($state, "hideHeader", "hideHeader") &&
            hasVariant($state, "padding", "xl34Px"),
          [sty.mainContainerhideHeader_padding_xl34Px_shadow_largeShadow]:
            hasVariant($state, "shadow", "largeShadow") &&
            hasVariant($state, "hideHeader", "hideHeader") &&
            hasVariant($state, "padding", "xl34Px"),
          [sty.mainContainerpadding_lg28Px]: hasVariant(
            $state,
            "padding",
            "lg28Px"
          ),
          [sty.mainContainerpadding_md22Px]: hasVariant(
            $state,
            "padding",
            "md22Px"
          ),
          [sty.mainContainerpadding_sm16Px]: hasVariant(
            $state,
            "padding",
            "sm16Px"
          ),
          [sty.mainContainerpadding_xl34Px]: hasVariant(
            $state,
            "padding",
            "xl34Px"
          ),
          [sty.mainContainerpadding_xs10Px]: hasVariant(
            $state,
            "padding",
            "xs10Px"
          ),
          [sty.mainContainershadow_largeShadow]: hasVariant(
            $state,
            "shadow",
            "largeShadow"
          ),
          [sty.mainContainershadow_smallShadow]: hasVariant(
            $state,
            "shadow",
            "smallShadow"
          )
        }
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"header"}
        data-plasmic-override={overrides.header}
        hasGap={true}
        className={classNames(projectcss.all, sty.header, {
          [sty.headerhideHeader]: hasVariant(
            $state,
            "hideHeader",
            "hideHeader"
          ),
          [sty.headerpadding_lg28Px]: hasVariant($state, "padding", "lg28Px"),
          [sty.headerpadding_md22Px]: hasVariant($state, "padding", "md22Px"),
          [sty.headerpadding_sm16Px]: hasVariant($state, "padding", "sm16Px"),
          [sty.headerpadding_xs10Px]: hasVariant($state, "padding", "xs10Px"),
          [sty.headershadow_smallShadow]: hasVariant(
            $state,
            "shadow",
            "smallShadow"
          )
        })}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox__ga3Bb, {
            [sty.freeBoxhideHeader__ga3Bb9Gaho]: hasVariant(
              $state,
              "hideHeader",
              "hideHeader"
            ),
            [sty.freeBoxpadding_sm16Px__ga3BbhvnIl]: hasVariant(
              $state,
              "padding",
              "sm16Px"
            ),
            [sty.freeBoxpadding_xs10Px__ga3BbQ2BwK]: hasVariant(
              $state,
              "padding",
              "xs10Px"
            ),
            [sty.freeBoxshadow_largeShadow__ga3BbVW22]: hasVariant(
              $state,
              "shadow",
              "largeShadow"
            ),
            [sty.freeBoxshadow_smallShadow__ga3BbccKty]: hasVariant(
              $state,
              "shadow",
              "smallShadow"
            )
          })}
        >
          <div
            className={classNames(projectcss.all, sty.freeBox___9HqKe, {
              [sty.freeBoxhideHeader___9HqKe9Gaho]: hasVariant(
                $state,
                "hideHeader",
                "hideHeader"
              ),
              [sty.freeBoxshadow_smallShadow___9HqKEccKty]: hasVariant(
                $state,
                "shadow",
                "smallShadow"
              )
            })}
          >
            {renderPlasmicSlot({
              defaultContents: "Card Title",
              value: args.children,
              className: classNames(sty.slotTargetChildren, {
                [sty.slotTargetChildrenshadow_smallShadow]: hasVariant(
                  $state,
                  "shadow",
                  "smallShadow"
                )
              })
            })}
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__ccrmi)}>
          <div className={classNames(projectcss.all, sty.freeBox__pvzrt)}>
            {renderPlasmicSlot({
              defaultContents: "Card description",
              value: args.slot,
              className: classNames(sty.slotTargetSlot)
            })}
          </div>
        </div>
      </Stack__>
      <div
        data-plasmic-name={"body"}
        data-plasmic-override={overrides.body}
        className={classNames(projectcss.all, sty.body, {
          [sty.bodyhideHeader]: hasVariant($state, "hideHeader", "hideHeader"),
          [sty.bodyhideHeader_padding_lg28Px]:
            hasVariant($state, "hideHeader", "hideHeader") &&
            hasVariant($state, "padding", "lg28Px"),
          [sty.bodyhideHeader_padding_md22Px]:
            hasVariant($state, "hideHeader", "hideHeader") &&
            hasVariant($state, "padding", "md22Px"),
          [sty.bodyhideHeader_padding_sm16Px]:
            hasVariant($state, "hideHeader", "hideHeader") &&
            hasVariant($state, "padding", "sm16Px"),
          [sty.bodyhideHeader_padding_xl34Px]:
            hasVariant($state, "hideHeader", "hideHeader") &&
            hasVariant($state, "padding", "xl34Px"),
          [sty.bodyhideHeader_padding_xs10Px]:
            hasVariant($state, "hideHeader", "hideHeader") &&
            hasVariant($state, "padding", "xs10Px"),
          [sty.bodypadding_lg28Px]: hasVariant($state, "padding", "lg28Px"),
          [sty.bodypadding_md22Px]: hasVariant($state, "padding", "md22Px"),
          [sty.bodypadding_sm16Px]: hasVariant($state, "padding", "sm16Px"),
          [sty.bodypadding_xs10Px]: hasVariant($state, "padding", "xs10Px")
        })}
      >
        {renderPlasmicSlot({
          defaultContents: null,
          value: args.bodyContent
        })}
      </div>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  mainContainer: ["mainContainer", "header", "body"],
  header: ["header"],
  body: ["body"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  mainContainer: "div";
  header: "div";
  body: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCard__VariantsArgs;
    args?: PlasmicCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCard__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCard__ArgProps,
          internalVariantPropNames: PlasmicCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "mainContainer") {
    func.displayName = "PlasmicCard";
  } else {
    func.displayName = `PlasmicCard.${nodeName}`;
  }
  return func;
}

export const PlasmicCard = Object.assign(
  // Top-level PlasmicCard renders the root element
  makeNodeComponent("mainContainer"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    body: makeNodeComponent("body"),

    // Metadata about props expected for PlasmicCard
    internalVariantProps: PlasmicCard__VariantProps,
    internalArgProps: PlasmicCard__ArgProps
  }
);

export default PlasmicCard;
/* prettier-ignore-end */
