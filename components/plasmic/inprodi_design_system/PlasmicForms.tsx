// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5nPYJMkHKsudqrrya3SLGq
// Component: KNXf3kuM8MY0

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Form from "../../Form"; // plasmic-import: rb5_PS-3AnYe/component
import { textInput } from "../../../src/components/TextInput"; // plasmic-import: 9j0HqeR2PssL/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 5nPYJMkHKsudqrrya3SLGq/projectcss
import sty from "./PlasmicForms.module.css"; // plasmic-import: KNXf3kuM8MY0/css

createPlasmicElementProxy;

export type PlasmicForms__VariantMembers = {};
export type PlasmicForms__VariantsArgs = {};
type VariantPropType = keyof PlasmicForms__VariantsArgs;
export const PlasmicForms__VariantProps = new Array<VariantPropType>();

export type PlasmicForms__ArgsType = {};
type ArgPropType = keyof PlasmicForms__ArgsType;
export const PlasmicForms__ArgProps = new Array<ArgPropType>();

export type PlasmicForms__OverridesType = {
  mainSection?: Flex__<"div">;
  form?: Flex__<typeof Form>;
  textInput?: Flex__<typeof textInput>;
};

export interface DefaultFormsProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicForms__RenderFunc(props: {
  variants: PlasmicForms__VariantsArgs;
  args: PlasmicForms__ArgsType;
  overrides: PlasmicForms__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "form.initValues",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({
          email: "",
          password: ""
        })
      },
      {
        path: "form.errors",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicForms.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicForms.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicForms.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <Stack__
          as={"div"}
          data-plasmic-name={"mainSection"}
          data-plasmic-override={overrides.mainSection}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.mainSection
          )}
        >
          <Form
            data-plasmic-name={"form"}
            data-plasmic-override={overrides.form}
            className={classNames("__wab_instance", sty.form)}
            content={
              <textInput
                data-plasmic-name={"textInput"}
                data-plasmic-override={overrides.textInput}
                addonAfter={"MXN"}
                addonBefore={"$"}
                allowClear={false}
                className={classNames("__wab_instance", sty.textInput)}
                defaultValue={""}
                disabled={false}
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "textInput",
                    "value"
                  ]).apply(null, eventArgs);
                  (async value => {
                    const $steps = {};

                    $steps["updateFormInitValuesEmail"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["form", "initValues", "email"]
                            },
                            operation: 0,
                            value: $state.textInput.value
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateFormInitValuesEmail"] != null &&
                      typeof $steps["updateFormInitValuesEmail"] === "object" &&
                      typeof $steps["updateFormInitValuesEmail"].then ===
                        "function"
                    ) {
                      $steps["updateFormInitValuesEmail"] = await $steps[
                        "updateFormInitValuesEmail"
                      ];
                    }
                  }).apply(null, eventArgs);
                }}
                placeholder={"Placeholder"}
                showLeftIcon={false}
                showRightIcon={false}
                size={"large"}
                value={generateStateValueProp($state, ["textInput", "value"])}
                variant={"outlined"}
              />
            }
            initValues={generateStateValueProp($state, ["form", "initValues"])}
            onErrorsChange={generateStateOnChangeProp($state, [
              "form",
              "errors"
            ])}
            onInitValuesChange={generateStateOnChangeProp($state, [
              "form",
              "initValues"
            ])}
          />
        </Stack__>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  mainSection: ["mainSection", "form", "textInput"],
  form: ["form", "textInput"],
  textInput: ["textInput"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  mainSection: "div";
  form: typeof Form;
  textInput: typeof textInput;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicForms__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicForms__VariantsArgs;
    args?: PlasmicForms__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicForms__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicForms__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicForms__ArgProps,
          internalVariantPropNames: PlasmicForms__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicForms__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "mainSection") {
    func.displayName = "PlasmicForms";
  } else {
    func.displayName = `PlasmicForms.${nodeName}`;
  }
  return func;
}

export const PlasmicForms = Object.assign(
  // Top-level PlasmicForms renders the root element
  makeNodeComponent("mainSection"),
  {
    // Helper components rendering sub-elements
    form: makeNodeComponent("form"),
    textInput: makeNodeComponent("textInput"),

    // Metadata about props expected for PlasmicForms
    internalVariantProps: PlasmicForms__VariantProps,
    internalArgProps: PlasmicForms__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Forms",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicForms;
/* prettier-ignore-end */
