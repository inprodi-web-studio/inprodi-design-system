// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5nPYJMkHKsudqrrya3SLGq
// Component: n6FobeB_Oas4

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import NavigationSidebar from "../../NavigationSidebar"; // plasmic-import: rjCX_w8hD0o4/component
import MenuItem from "../../MenuItem"; // plasmic-import: KcpCffGmy6kt/component
import MenuGroup from "../../MenuGroup"; // plasmic-import: VPuDrZG7cL_L/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 5nPYJMkHKsudqrrya3SLGq/projectcss
import sty from "./PlasmicLayout.module.css"; // plasmic-import: n6FobeB_Oas4/css

import ScrollDuotonesvgIcon from "./icons/PlasmicIcon__ScrollDuotonesvg"; // plasmic-import: 8QgUleY3Rjyy/icon

createPlasmicElementProxy;

export type PlasmicLayout__VariantMembers = {};
export type PlasmicLayout__VariantsArgs = {};
type VariantPropType = keyof PlasmicLayout__VariantsArgs;
export const PlasmicLayout__VariantProps = new Array<VariantPropType>();

export type PlasmicLayout__ArgsType = {};
type ArgPropType = keyof PlasmicLayout__ArgsType;
export const PlasmicLayout__ArgProps = new Array<ArgPropType>();

export type PlasmicLayout__OverridesType = {
  mainSection?: Flex__<"div">;
  navigationSidebar?: Flex__<typeof NavigationSidebar>;
  menuItem?: Flex__<typeof MenuItem>;
  svg?: Flex__<"svg">;
  menuGroup?: Flex__<typeof MenuGroup>;
};

export interface DefaultLayoutProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLayout__RenderFunc(props: {
  variants: PlasmicLayout__VariantsArgs;
  args: PlasmicLayout__ArgsType;
  overrides: PlasmicLayout__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "menuItem.isActive",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                return $ctx.pagePath.includes("itemKey");
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"mainSection"}
          data-plasmic-override={overrides.mainSection}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.mainSection
          )}
        >
          <NavigationSidebar
            data-plasmic-name={"navigationSidebar"}
            data-plasmic-override={overrides.navigationSidebar}
            className={classNames("__wab_instance", sty.navigationSidebar)}
            items={
              <React.Fragment>
                {(() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.menuItem),
                    icon2: (
                      <ScrollDuotonesvgIcon
                        data-plasmic-name={"svg"}
                        data-plasmic-override={overrides.svg}
                        className={classNames(projectcss.all, sty.svg)}
                        role={"img"}
                      />
                    ),

                    isActive: generateStateValueProp($state, [
                      "menuItem",
                      "isActive"
                    ]),
                    onIsActiveChange: generateStateOnChangeProp($state, [
                      "menuItem",
                      "isActive"
                    ])
                  };

                  initializePlasmicStates(
                    $state,
                    [
                      {
                        name: "menuItem.isActive",
                        initFunc: ({ $props, $state, $queries }) =>
                          (() => {
                            try {
                              return (() => {
                                return $ctx.pagePath.includes("itemKey");
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                      }
                    ],
                    []
                  );
                  return (
                    <MenuItem
                      data-plasmic-name={"menuItem"}
                      data-plasmic-override={overrides.menuItem}
                      {...child$Props}
                    />
                  );
                })()}
                <MenuGroup
                  data-plasmic-name={"menuGroup"}
                  data-plasmic-override={overrides.menuGroup}
                  className={classNames("__wab_instance", sty.menuGroup)}
                />
              </React.Fragment>
            }
            topContent={null}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  mainSection: [
    "mainSection",
    "navigationSidebar",
    "menuItem",
    "svg",
    "menuGroup"
  ],
  navigationSidebar: ["navigationSidebar", "menuItem", "svg", "menuGroup"],
  menuItem: ["menuItem", "svg"],
  svg: ["svg"],
  menuGroup: ["menuGroup"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  mainSection: "div";
  navigationSidebar: typeof NavigationSidebar;
  menuItem: typeof MenuItem;
  svg: "svg";
  menuGroup: typeof MenuGroup;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLayout__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLayout__VariantsArgs;
    args?: PlasmicLayout__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLayout__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicLayout__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLayout__ArgProps,
          internalVariantPropNames: PlasmicLayout__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLayout__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "mainSection") {
    func.displayName = "PlasmicLayout";
  } else {
    func.displayName = `PlasmicLayout.${nodeName}`;
  }
  return func;
}

export const PlasmicLayout = Object.assign(
  // Top-level PlasmicLayout renders the root element
  makeNodeComponent("mainSection"),
  {
    // Helper components rendering sub-elements
    navigationSidebar: makeNodeComponent("navigationSidebar"),
    menuItem: makeNodeComponent("menuItem"),
    svg: makeNodeComponent("svg"),
    menuGroup: makeNodeComponent("menuGroup"),

    // Metadata about props expected for PlasmicLayout
    internalVariantProps: PlasmicLayout__VariantProps,
    internalArgProps: PlasmicLayout__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicLayout;
/* prettier-ignore-end */
