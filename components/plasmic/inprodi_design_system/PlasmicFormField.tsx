// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5nPYJMkHKsudqrrya3SLGq
// Component: yLHiIXcGvJuv

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { textInput } from "../../../src/components/TextInput"; // plasmic-import: 9j0HqeR2PssL/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 5nPYJMkHKsudqrrya3SLGq/projectcss
import sty from "./PlasmicFormField.module.css"; // plasmic-import: yLHiIXcGvJuv/css

import InfosvgIcon from "./icons/PlasmicIcon__Infosvg"; // plasmic-import: 2_kwtnaSzZgd/icon
import WarningDiamondsvgIcon from "./icons/PlasmicIcon__WarningDiamondsvg"; // plasmic-import: qLqG6TErDgjs/icon

createPlasmicElementProxy;

export type PlasmicFormField__VariantMembers = {};
export type PlasmicFormField__VariantsArgs = {};
type VariantPropType = keyof PlasmicFormField__VariantsArgs;
export const PlasmicFormField__VariantProps = new Array<VariantPropType>();

export type PlasmicFormField__ArgsType = {
  label2?: string;
  description2?: string;
  help?: string;
  isRequired?: boolean;
  error?: string;
  value?: string;
  onValueChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicFormField__ArgsType;
export const PlasmicFormField__ArgProps = new Array<ArgPropType>(
  "label2",
  "description2",
  "help",
  "isRequired",
  "error",
  "value",
  "onValueChange"
);

export type PlasmicFormField__OverridesType = {
  textField?: Flex__<"div">;
  labelContainer?: Flex__<"div">;
  container?: Flex__<"div">;
  container2?: Flex__<"div">;
  label?: Flex__<"div">;
  requiredIndicator?: Flex__<"div">;
  icon?: Flex__<"svg">;
  description?: Flex__<"div">;
  input?: Flex__<"div">;
  textInput?: Flex__<typeof textInput>;
  errorContainer?: Flex__<"div">;
  errorIcon?: Flex__<"svg">;
  errorLabel?: Flex__<"div">;
};

export interface DefaultFormFieldProps {
  label2?: string;
  description2?: string;
  help?: string;
  isRequired?: boolean;
  error?: string;
  value?: string;
  onValueChange?: (val: string) => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFormField__RenderFunc(props: {
  variants: PlasmicFormField__VariantsArgs;
  args: PlasmicFormField__ArgsType;
  overrides: PlasmicFormField__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          isRequired: false
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "value",
        type: "writable",
        variableType: "text",

        valueProp: "value",
        onChangeProp: "onValueChange"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"textField"}
      data-plasmic-override={overrides.textField}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.textField
      )}
    >
      {(() => {
        try {
          return (() => {
            return $props.label2;
          })();
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return false;
          }
          throw e;
        }
      })() ? (
        <div
          data-plasmic-name={"labelContainer"}
          data-plasmic-override={overrides.labelContainer}
          className={classNames(projectcss.all, sty.labelContainer)}
        >
          <div
            data-plasmic-name={"container"}
            data-plasmic-override={overrides.container}
            className={classNames(projectcss.all, sty.container)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"container2"}
              data-plasmic-override={overrides.container2}
              hasGap={true}
              className={classNames(projectcss.all, sty.container2)}
            >
              <div
                data-plasmic-name={"label"}
                data-plasmic-override={overrides.label}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.label
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.label2;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Form Label";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              {(() => {
                try {
                  return $props.isRequired;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  data-plasmic-name={"requiredIndicator"}
                  data-plasmic-override={overrides.requiredIndicator}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.requiredIndicator
                  )}
                >
                  {"*"}
                </div>
              ) : null}
            </Stack__>
            <InfosvgIcon
              data-plasmic-name={"icon"}
              data-plasmic-override={overrides.icon}
              className={classNames(projectcss.all, sty.icon)}
              role={"img"}
            />
          </div>
          {(() => {
            try {
              return (() => {
                return $props.description2;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div
              data-plasmic-name={"description"}
              data-plasmic-override={overrides.description}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.description
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.description2;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Input Description";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          ) : null}
        </div>
      ) : null}
      <div
        data-plasmic-name={"input"}
        data-plasmic-override={overrides.input}
        className={classNames(projectcss.all, sty.input)}
      >
        <textInput
          data-plasmic-name={"textInput"}
          data-plasmic-override={overrides.textInput}
          addonAfter={"MXN"}
          addonBefore={"$"}
          allowClear={false}
          className={classNames("__wab_instance", sty.textInput)}
          defaultValue={(() => {
            try {
              return $state.value;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          disabled={false}
          onChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["textInput", "value"]).apply(
              null,
              eventArgs
            );
            (async value => {
              const $steps = {};

              $steps["updateValue"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["value"]
                      },
                      operation: 0,
                      value: (() => {
                        return $state.textInput.value;
                      })()
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateValue"] != null &&
                typeof $steps["updateValue"] === "object" &&
                typeof $steps["updateValue"].then === "function"
              ) {
                $steps["updateValue"] = await $steps["updateValue"];
              }
            }).apply(null, eventArgs);
          }}
          placeholder={"Placeholder"}
          showLeftIcon={false}
          showRightIcon={false}
          size={"large"}
          status={(() => {
            try {
              return (() => {
                if ($props.error) return "error";
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          value={generateStateValueProp($state, ["textInput", "value"])}
          variant={"outlined"}
        />
      </div>
      {(() => {
        try {
          return (() => {
            return $props.error;
          })();
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <Stack__
          as={"div"}
          data-plasmic-name={"errorContainer"}
          data-plasmic-override={overrides.errorContainer}
          hasGap={true}
          className={classNames(projectcss.all, sty.errorContainer)}
        >
          <WarningDiamondsvgIcon
            data-plasmic-name={"errorIcon"}
            data-plasmic-override={overrides.errorIcon}
            className={classNames(projectcss.all, sty.errorIcon)}
            role={"img"}
          />

          <div
            data-plasmic-name={"errorLabel"}
            data-plasmic-override={overrides.errorLabel}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.errorLabel
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return (() => {
                    return $props.error;
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Error Label";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </Stack__>
      ) : null}
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  textField: [
    "textField",
    "labelContainer",
    "container",
    "container2",
    "label",
    "requiredIndicator",
    "icon",
    "description",
    "input",
    "textInput",
    "errorContainer",
    "errorIcon",
    "errorLabel"
  ],
  labelContainer: [
    "labelContainer",
    "container",
    "container2",
    "label",
    "requiredIndicator",
    "icon",
    "description"
  ],
  container: ["container", "container2", "label", "requiredIndicator", "icon"],
  container2: ["container2", "label", "requiredIndicator"],
  label: ["label"],
  requiredIndicator: ["requiredIndicator"],
  icon: ["icon"],
  description: ["description"],
  input: ["input", "textInput"],
  textInput: ["textInput"],
  errorContainer: ["errorContainer", "errorIcon", "errorLabel"],
  errorIcon: ["errorIcon"],
  errorLabel: ["errorLabel"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  textField: "div";
  labelContainer: "div";
  container: "div";
  container2: "div";
  label: "div";
  requiredIndicator: "div";
  icon: "svg";
  description: "div";
  input: "div";
  textInput: typeof textInput;
  errorContainer: "div";
  errorIcon: "svg";
  errorLabel: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFormField__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFormField__VariantsArgs;
    args?: PlasmicFormField__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFormField__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicFormField__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFormField__ArgProps,
          internalVariantPropNames: PlasmicFormField__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFormField__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "textField") {
    func.displayName = "PlasmicFormField";
  } else {
    func.displayName = `PlasmicFormField.${nodeName}`;
  }
  return func;
}

export const PlasmicFormField = Object.assign(
  // Top-level PlasmicFormField renders the root element
  makeNodeComponent("textField"),
  {
    // Helper components rendering sub-elements
    labelContainer: makeNodeComponent("labelContainer"),
    container: makeNodeComponent("container"),
    container2: makeNodeComponent("container2"),
    label: makeNodeComponent("label"),
    requiredIndicator: makeNodeComponent("requiredIndicator"),
    icon: makeNodeComponent("icon"),
    description: makeNodeComponent("description"),
    input: makeNodeComponent("input"),
    textInput: makeNodeComponent("textInput"),
    errorContainer: makeNodeComponent("errorContainer"),
    errorIcon: makeNodeComponent("errorIcon"),
    errorLabel: makeNodeComponent("errorLabel"),

    // Metadata about props expected for PlasmicFormField
    internalVariantProps: PlasmicFormField__VariantProps,
    internalArgProps: PlasmicFormField__ArgProps
  }
);

export default PlasmicFormField;
/* prettier-ignore-end */
